# -*- coding: utf-8 -*-
"""story2_TwoNum.csv

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/EDpoonam/6b42123a87e48a8e8eb31f38f385e013/onenum-dataset.ipynb
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from tabulate import tabulate

# Load dataset from github
df = "https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/2_TwoNum.csv"
df_2 = pd.read_csv(df, usecols=['GrLivArea', 'SalePrice'])

df_2

# For 1st plot
fig, ax1 = plt.subplots()
ax1.hist(df_2['GrLivArea'], bins=50, color='#69b3a2', edgecolor='#e9ecef', alpha=0.9)
ax1.set_xlabel('area')
ax1.set_ylabel('Frequency')
ax1.set_title('Ground living area distribution')
# For 2nd plot
fig, ax2 = plt.subplots()
ax2.hist(df_2['SalePrice']/1000, bins=50, color='#69b3a2', edgecolor='#e9ecef', alpha=0.9)
ax2.set_xlabel('Sale price (k$)')
ax2.set_ylabel('Frequency')
ax2.set_title('Sale price distribution')

# Combine the plots
fig.tight_layout()
plt.show()

fig, ax = plt.subplots()
ax.scatter(df_2['GrLivArea'], df_2['SalePrice']/1000, color='#69b3a2', alpha=0.8)
ax.set_xlabel('Ground living area')
ax.set_ylabel('Sale price (k$)')
ax.set_title('Ground living area partially explains sale price of apartments')

# Show the plot
fig.tight_layout()
plt.show()

import seaborn as sns

# Create a FacetGrid object
g = sns.FacetGrid(df_2, height=5, aspect=1.2)

# Add scatterplot with linear regression
g.map(sns.scatterplot, 'GrLivArea', 'SalePrice', color='#69b3a2', alpha=0.8)
g.map(sns.regplot, 'GrLivArea', 'SalePrice', scatter=False, line_kws={'color': 'black', 'alpha': 0.8})

# Add scatterplot with loess regression
g.map(sns.regplot, 'GrLivArea', 'SalePrice', scatter=False, lowess=True, line_kws={'color': 'black', 'alpha': 0.8})

# Set titles and axis labels
g.fig.suptitle("Linear regression and loess", fontsize=12, y=1.03)
g.set_axis_labels("Ground living area", "Sale price (k$)")
g.axes[0, 0].set_title("Linear regression", fontsize=10)


# Show the plot
plt.tight_layout()
plt.show()

# Define plot theme
sns.set_theme(style="ticks")

# Create base plot
p = sns.scatterplot(data=df_2, x="GrLivArea", y="SalePrice", alpha=0.8, hue="SalePrice", palette="viridis")
p.set(xlabel='Ground living area', ylabel='Sale price (USD)')

# Reduce dot size
p1 = p = sns.scatterplot(data=df_2, x="GrLivArea", y="SalePrice", alpha=0.8, s=2, color="#69b3a2")
p1.set_title("Dot size")

# Use density estimate
p2 = sns.kdeplot(data=df_2, x="GrLivArea", y="SalePrice", levels=5, color="#69b3a2")
p2.set_title("Density 2d: contour")

# Use density estimate (area)
p3 = sns.kdeplot(data=df_2, x="GrLivArea", y="SalePrice", levels=5, fill=True, cmap="Blues", thresh=0.05, alpha=0.8)
p3.set_title("Density 2d: area")

# With raster
p4 = sns.kdeplot(data=df_2, x="GrLivArea", y="SalePrice", cmap="YlGnBu", shade=True, shade_lowest=False, cbar=True)
p4.set_title("Density 2d: raster")

# Hexbin
p5 = sns.jointplot(data=df_2, x="GrLivArea", y="SalePrice", kind="hex", cmap="viridis")
p5.fig.suptitle("Hexbin")

# 2d histogram
p6 = sns.histplot(data=df_2, x="GrLivArea", y="SalePrice", bins=50, cmap="viridis", cbar=True)
p6.set_title("2d histogram")

# Set plot layout
plt.subplots_adjust(wspace=0.4, hspace=0.4)
plt.show()